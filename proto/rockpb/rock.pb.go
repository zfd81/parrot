// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rock.proto

package rockpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RpcRequest struct {
	Params               map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header               map[string]string `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                 string            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RpcRequest) Reset()         { *m = RpcRequest{} }
func (m *RpcRequest) String() string { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()    {}
func (*RpcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcfc3b85b120bb10, []int{0}
}

func (m *RpcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcRequest.Unmarshal(m, b)
}
func (m *RpcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcRequest.Marshal(b, m, deterministic)
}
func (m *RpcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcRequest.Merge(m, src)
}
func (m *RpcRequest) XXX_Size() int {
	return xxx_messageInfo_RpcRequest.Size(m)
}
func (m *RpcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcRequest proto.InternalMessageInfo

func (m *RpcRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RpcRequest) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RpcRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RpcResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResponse) Reset()         { *m = RpcResponse{} }
func (m *RpcResponse) String() string { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()    {}
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcfc3b85b120bb10, []int{1}
}

func (m *RpcResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcResponse.Unmarshal(m, b)
}
func (m *RpcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcResponse.Marshal(b, m, deterministic)
}
func (m *RpcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResponse.Merge(m, src)
}
func (m *RpcResponse) XXX_Size() int {
	return xxx_messageInfo_RpcResponse.Size(m)
}
func (m *RpcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResponse proto.InternalMessageInfo

func (m *RpcResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RpcResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RpcResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ServResponse struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Header               map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data                 string            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServResponse) Reset()         { *m = ServResponse{} }
func (m *ServResponse) String() string { return proto.CompactTextString(m) }
func (*ServResponse) ProtoMessage()    {}
func (*ServResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcfc3b85b120bb10, []int{2}
}

func (m *ServResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServResponse.Unmarshal(m, b)
}
func (m *ServResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServResponse.Marshal(b, m, deterministic)
}
func (m *ServResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServResponse.Merge(m, src)
}
func (m *ServResponse) XXX_Size() int {
	return xxx_messageInfo_ServResponse.Size(m)
}
func (m *ServResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServResponse proto.InternalMessageInfo

func (m *ServResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ServResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "RpcRequest")
	proto.RegisterMapType((map[string]string)(nil), "RpcRequest.HeaderEntry")
	proto.RegisterMapType((map[string]string)(nil), "RpcRequest.ParamsEntry")
	proto.RegisterType((*RpcResponse)(nil), "RpcResponse")
	proto.RegisterType((*ServResponse)(nil), "ServResponse")
	proto.RegisterMapType((map[string]string)(nil), "ServResponse.HeaderEntry")
}

func init() { proto.RegisterFile("rock.proto", fileDescriptor_dcfc3b85b120bb10) }

var fileDescriptor_dcfc3b85b120bb10 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0xcf, 0x93, 0x40,
	0x10, 0xc6, 0x05, 0xfa, 0x96, 0x74, 0xa0, 0xda, 0x6c, 0x4c, 0xc4, 0x9e, 0x1a, 0xe2, 0xa1, 0xd1,
	0x0a, 0xb1, 0x5e, 0xd4, 0x9b, 0xb6, 0x1a, 0x0f, 0x36, 0x1a, 0xea, 0xc9, 0xdb, 0x02, 0xa3, 0x92,
	0x52, 0xc0, 0xdd, 0xa5, 0x09, 0x5f, 0xce, 0xf8, 0xb1, 0x3c, 0x19, 0xb3, 0x4b, 0x6b, 0x69, 0x7c,
	0x43, 0x69, 0x6f, 0xfb, 0xe7, 0xf7, 0xcc, 0xcc, 0xf3, 0x6c, 0xb2, 0x00, 0x2c, 0x8f, 0x36, 0x5e,
	0xc1, 0x72, 0x91, 0xbb, 0xbf, 0x35, 0x80, 0xa0, 0x88, 0x02, 0xfc, 0x51, 0x22, 0x17, 0xc4, 0x87,
	0x7e, 0x41, 0x19, 0xdd, 0x72, 0x47, 0x9b, 0x18, 0x53, 0x6b, 0xfe, 0xc0, 0x3b, 0x5e, 0x7a, 0x9f,
	0xd4, 0xcd, 0xdb, 0x4c, 0xb0, 0x2a, 0xd8, 0x63, 0x52, 0xf0, 0x1d, 0x69, 0x8c, 0xcc, 0xd1, 0xff,
	0x17, 0xbc, 0x57, 0x37, 0x7b, 0x41, 0x8d, 0x11, 0x02, 0xbd, 0x98, 0x0a, 0xea, 0x18, 0x13, 0x6d,
	0x3a, 0x08, 0xd4, 0x7a, 0xfc, 0x12, 0xac, 0x46, 0x6d, 0x32, 0x02, 0x63, 0x83, 0x95, 0xa3, 0x29,
	0x42, 0x2e, 0xc9, 0x7d, 0xb8, 0xd9, 0xd1, 0xb4, 0x44, 0x47, 0x57, 0x67, 0xf5, 0xe6, 0x95, 0xfe,
	0x42, 0x93, 0xd2, 0x46, 0x97, 0x4b, 0xa4, 0xee, 0x47, 0xb0, 0xd4, 0xac, 0xbc, 0xc8, 0x33, 0x8e,
	0x72, 0xb0, 0x28, 0x8f, 0x51, 0x69, 0x6f, 0x02, 0xb5, 0x26, 0x0e, 0x98, 0x5b, 0xe4, 0x9c, 0x7e,
	0x3b, 0xc8, 0x0f, 0xdb, 0xdb, 0x6c, 0xb8, 0x3f, 0x35, 0xb0, 0xd7, 0xc8, 0x76, 0x57, 0x96, 0x7c,
	0xf6, 0x2f, 0x4a, 0x43, 0x45, 0xf9, 0xd0, 0x6b, 0x16, 0x6b, 0x0d, 0xb3, 0x77, 0x1a, 0xe6, 0x95,
	0x89, 0xcc, 0x7f, 0xe9, 0x60, 0xca, 0x9e, 0x49, 0x84, 0x64, 0x06, 0xf6, 0x67, 0xe4, 0xe2, 0x75,
	0x46, 0xd3, 0x8a, 0x27, 0x9c, 0x58, 0x8d, 0x87, 0x1d, 0x0f, 0x4f, 0x46, 0x73, 0xef, 0x90, 0x47,
	0xd0, 0x93, 0xf4, 0x19, 0x6a, 0x06, 0xc3, 0x05, 0x43, 0x2a, 0xf0, 0xd0, 0xe4, 0x04, 0xb7, 0xbd,
	0xc6, 0x73, 0xd4, 0xf4, 0x12, 0x53, 0xec, 0x4e, 0xaf, 0xf2, 0x38, 0xf9, 0x5a, 0x75, 0xa2, 0x1f,
	0x83, 0xf5, 0x2e, 0xc9, 0xe2, 0x4e, 0xec, 0x13, 0xb0, 0x3f, 0x24, 0x5c, 0xec, 0x59, 0xde, 0x0a,
	0xcf, 0xff, 0x68, 0x00, 0x4b, 0x2a, 0xe8, 0x3a, 0x2f, 0x59, 0x84, 0xc4, 0x87, 0x51, 0xed, 0xb8,
	0x71, 0xd6, 0xda, 0xcc, 0x87, 0x51, 0x6d, 0xfa, 0x02, 0x41, 0xed, 0xbb, 0xab, 0xe0, 0x29, 0xdc,
	0x95, 0xd6, 0xbb, 0xe2, 0x1e, 0xdc, 0x93, 0xee, 0x8f, 0xf8, 0x99, 0x00, 0x42, 0x30, 0x17, 0x69,
	0xc9, 0x05, 0x32, 0x19, 0xb2, 0x94, 0xae, 0x70, 0x1b, 0x22, 0xe3, 0x67, 0x43, 0xae, 0xb9, 0xb5,
	0xa0, 0xa2, 0x6c, 0x87, 0xdf, 0x0c, 0xbe, 0x98, 0xbe, 0xfc, 0xc3, 0x8a, 0x30, 0xec, 0xab, 0x6f,
	0xec, 0xf9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xd7, 0x85, 0x11, 0xd4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	TestAnalysis(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*ServResponse, error)
	Test(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*ServResponse, error)
	CreateService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	DeleteService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	ModifyService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	FindService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	ListServices(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) TestAnalysis(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*ServResponse, error) {
	out := new(ServResponse)
	err := c.cc.Invoke(ctx, "/Service/TestAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Test(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*ServResponse, error) {
	out := new(ServResponse)
	err := c.cc.Invoke(ctx, "/Service/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Service/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Service/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ModifyService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Service/ModifyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FindService(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Service/FindService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListServices(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Service/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	TestAnalysis(context.Context, *RpcRequest) (*ServResponse, error)
	Test(context.Context, *RpcRequest) (*ServResponse, error)
	CreateService(context.Context, *RpcRequest) (*RpcResponse, error)
	DeleteService(context.Context, *RpcRequest) (*RpcResponse, error)
	ModifyService(context.Context, *RpcRequest) (*RpcResponse, error)
	FindService(context.Context, *RpcRequest) (*RpcResponse, error)
	ListServices(context.Context, *RpcRequest) (*RpcResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) TestAnalysis(ctx context.Context, req *RpcRequest) (*ServResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAnalysis not implemented")
}
func (*UnimplementedServiceServer) Test(ctx context.Context, req *RpcRequest) (*ServResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (*UnimplementedServiceServer) CreateService(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedServiceServer) DeleteService(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (*UnimplementedServiceServer) ModifyService(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyService not implemented")
}
func (*UnimplementedServiceServer) FindService(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindService not implemented")
}
func (*UnimplementedServiceServer) ListServices(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_TestAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/TestAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestAnalysis(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Test(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateService(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteService(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ModifyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ModifyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/ModifyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ModifyService(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/FindService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FindService(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListServices(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestAnalysis",
			Handler:    _Service_TestAnalysis_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Service_Test_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _Service_CreateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Service_DeleteService_Handler,
		},
		{
			MethodName: "ModifyService",
			Handler:    _Service_ModifyService_Handler,
		},
		{
			MethodName: "FindService",
			Handler:    _Service_FindService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Service_ListServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rock.proto",
}

// DataSourceClient is the client API for DataSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataSourceClient interface {
	CreateDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	DeleteDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	ModifyDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	FindDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	ListDataSources(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type dataSourceClient struct {
	cc *grpc.ClientConn
}

func NewDataSourceClient(cc *grpc.ClientConn) DataSourceClient {
	return &dataSourceClient{cc}
}

func (c *dataSourceClient) CreateDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/DataSource/CreateDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceClient) DeleteDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/DataSource/DeleteDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceClient) ModifyDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/DataSource/ModifyDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceClient) FindDataSource(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/DataSource/FindDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceClient) ListDataSources(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/DataSource/ListDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceServer is the server API for DataSource service.
type DataSourceServer interface {
	CreateDataSource(context.Context, *RpcRequest) (*RpcResponse, error)
	DeleteDataSource(context.Context, *RpcRequest) (*RpcResponse, error)
	ModifyDataSource(context.Context, *RpcRequest) (*RpcResponse, error)
	FindDataSource(context.Context, *RpcRequest) (*RpcResponse, error)
	ListDataSources(context.Context, *RpcRequest) (*RpcResponse, error)
}

// UnimplementedDataSourceServer can be embedded to have forward compatible implementations.
type UnimplementedDataSourceServer struct {
}

func (*UnimplementedDataSourceServer) CreateDataSource(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSource not implemented")
}
func (*UnimplementedDataSourceServer) DeleteDataSource(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSource not implemented")
}
func (*UnimplementedDataSourceServer) ModifyDataSource(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDataSource not implemented")
}
func (*UnimplementedDataSourceServer) FindDataSource(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDataSource not implemented")
}
func (*UnimplementedDataSourceServer) ListDataSources(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSources not implemented")
}

func RegisterDataSourceServer(s *grpc.Server, srv DataSourceServer) {
	s.RegisterService(&_DataSource_serviceDesc, srv)
}

func _DataSource_CreateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServer).CreateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataSource/CreateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServer).CreateDataSource(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSource_DeleteDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServer).DeleteDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataSource/DeleteDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServer).DeleteDataSource(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSource_ModifyDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServer).ModifyDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataSource/ModifyDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServer).ModifyDataSource(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSource_FindDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServer).FindDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataSource/FindDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServer).FindDataSource(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSource_ListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServer).ListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataSource/ListDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServer).ListDataSources(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataSource",
	HandlerType: (*DataSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataSource",
			Handler:    _DataSource_CreateDataSource_Handler,
		},
		{
			MethodName: "DeleteDataSource",
			Handler:    _DataSource_DeleteDataSource_Handler,
		},
		{
			MethodName: "ModifyDataSource",
			Handler:    _DataSource_ModifyDataSource_Handler,
		},
		{
			MethodName: "FindDataSource",
			Handler:    _DataSource_FindDataSource_Handler,
		},
		{
			MethodName: "ListDataSources",
			Handler:    _DataSource_ListDataSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rock.proto",
}

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	ListMembers(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	MemberStatus(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) ListMembers(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Cluster/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberStatus(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/Cluster/MemberStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	ListMembers(context.Context, *RpcRequest) (*RpcResponse, error)
	MemberStatus(context.Context, *RpcRequest) (*RpcResponse, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) ListMembers(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (*UnimplementedClusterServer) MemberStatus(ctx context.Context, req *RpcRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberStatus not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ListMembers(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cluster/MemberStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberStatus(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMembers",
			Handler:    _Cluster_ListMembers_Handler,
		},
		{
			MethodName: "MemberStatus",
			Handler:    _Cluster_MemberStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rock.proto",
}
